<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-us" xmlns="http://www.w3.org/2005/Atom">
 <title>cl-blog-generator</title>
 <id>http://hugoduncan.github.com/cl-blog-generator/</id>
 <link href="./"/>
 <link href="" rel="self"/>
 <logo>rsslogo.jpg</logo>
 <icon>/favicon.ico</icon>
 <author><name>Hugo Duncan</name></author>
 <subtitle>Development Blog</subtitle>
 <rights>All content written by Hugo Duncan and photos by Hugo Duncan Copyright Hugo Duncan, all rights reserved.</rights>
 <updated>2009-03-11T18:18:51.194959-04:00</updated><entry xml:base="http://hugoduncan.github.com/cl-blog-generator/content/site/"><title>Blog Generator Configuration</title><link href="http://hugoduncan.github.com/cl-blog-generator/content/site/post/2009/blog_generator_configuration.xhtml"/><id>http://hugoduncan.github.com/cl-blog-generator/content/site/post/2009/blog_generator_configuration.xhtml</id><published>2009-03-03T19:00:00.000000-05:00</published><updated>2009-03-03T19:00:00.000000-05:00</updated><summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The blog generator is intended to be quite flexible, within the design constraints, which has lead to a large number of possible configurations, both on the lisp side, and for Emacs.  Drafts can be written using any editor, but I shall describe use with Emacs.  The package has only been tested with SBCL, but should work with any common lisp implentation.</p></div></summary><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">
<p>The blog generator is intended to be quite flexible, within the design constraints, which has lead to a large number of possible configurations, both on the lisp side, and for Emacs.  Drafts can be written using any editor, but I shall describe use with Emacs.  The package has only been tested with SBCL, but should work with any common lisp implentation.</p>

<h2>Prerequisites</h2>
<p>The blog generator uses <a href="http://common-lisp.net/project/cxml/">CXML</a>, <a href="http://common-lisp.net/project/elephant/">Elephant</a>, <a href="http://weitz.de/cl-fad/">CL-FAD</a>, <a href="http://common-lisp.net/project/local-time/">Local-Time</a>, and <a href="http://common-lisp.net/project/stefil/">Stefil</a> for testing.  I am using clbuild to obtain these.</p>
<p>For Emacs, I use <a href="http://www.thaiopensource.com/nxml-mode/">nXML mode</a>.</p>

<h2>Configuration Environments</h2>
<p>A configuration switching method is included in the package, but it's use is optional, and as is usual for lisp, configuration is through special variables.</p>
<p>For an example of using the configuration environments, look at the <code>config.lisp</code> file loaded by the <code>my-blog.asd</code> system.  This defines the three environments that I use, <code>:test</code>, <code>:development</code>, and <code>:production</code>.  Configurations are defined using <code>SET-ENVIRONMENT</code> and activated with <code>CONFIGURE</code>.</p>

<h2>Basic Configuration</h2>
<p>The first configuration required is the choice of file system locations for the published posts (<code>*PUBLISHED-PATH*</code>), the generated web pages(<code>*SITE-PATH*</code>) and the page templates (<code>*TEMPLATE-PATH*</code>).   Drafts can exist anywhere, and are not tracked by the generator.</p>
<p>Next, the web paths need to be configured.  The path of the blog's index file relative to the site root is required (<code>*BLOG-ROOT-PATH*</code>), as is the domain of the site (<code>*BLOG-DOMAIN*</code>), in order for it to be used in the Atom feed.</p>
<p>Finally, the database connection expression is required (<code>*BLOG-DB-SPEC*</code>).  Please refer to the Elephant documentation for your choices here.  I use postgres, but it should work with the BDB backend as well.</p>

<h2>Templates</h2>
<p>The site requires three templates in <code>*TEMPLATE-PATH*</code>; for the index file (<code>index.html</code>), for the posts (<code>post.xhtml</code>) and for the Atom feed (<code>atom.xml</code>).  The templates are very simple - each div or span with a recognised id has content injected into it.  The recoginised id's are:</p>
<ul>
  <li><code>posts</code> - replaced with the current post synopses, and links to the posts</li>
  <li><code>post</code> - replaced with the current post's content</li>
  <li><code>post-title</code> - replaced with the current post's title</li>
  <li><code>post-when</code> - replaced with the current post's published date</li>
  <li><code>post-update</code> - replaced with the current post's updated date</li>
</ul>
<p>For the Atom feed, the <code>updated</code> element is filled out correctly, and the posts are automatically inserted, ie. there are no special id's.</p>

</div></content></entry><entry xml:base="http://hugoduncan.github.com/cl-blog-generator/content/site/"><title>Blog Generator Design</title><link href="http://hugoduncan.github.com/cl-blog-generator/content/site/post/2009/blog_generator_design.xhtml"/><id>http://hugoduncan.github.com/cl-blog-generator/content/site/post/2009/blog_generator_design.xhtml</id><published>2009-03-03T19:00:00.000000-05:00</published><updated>2009-03-03T19:00:00.000000-05:00</updated><summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I want to be able publish posts easily to a statically served site.  I am sure that there are lots of blog site generators out there, but I could not find one that I liked, and which was in a language I would enjoy hacking, and so I wrote my own.</p></div></summary><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">
<p>I want to be able publish posts easily to a statically served site.  I am sure that there are lots of blog site generators out there, but I could not find one that I liked, and which was in a language I would enjoy hacking, and so I wrote my own.</p>

<p>The blog site is generated from file based posts, using an augmented version of xhtml as the input format. The input format has a DTD, as well as a Relax NG compressed schema generated using <a href="http://www.thaiopensource.com/relaxng/trang.html">Trang</a> which is used in the provided schemas.xml file to allow validation in Emacs <a href="http://www.thaiopensource.com/nxml-mode/">nXML mode</a>.</p>

<p>When ready, the drafts are merged into a post template, in standard xhtml, to produce a site that can be rsync'd to a web host.  The merging of the templates is done using <a href="http://www.sbcl.org/">SBCL</a> and <a href="http://common-lisp.net/project/cxml/">CXML</a>.  The generator maintains a database of posts, so that it can generate the index page, etc, and uses <a href="http://common-lisp.net/project/elephant/">Elephant</a>.  The whole site can be re-generated from the input post files, so a revision control system, such as git, can be used to manage the posts, and we don't have to worry about backing up the the database too frequently.</p>

<p>An Emacs minor-mode can be used to trigger the publishing and site generation.</p>

<p>The generator is intended to produce a personol blog, with one user.  I am however misusing it here to provide a sort of update blog for the software itself.</p>
</div></content></entry>

</feed>