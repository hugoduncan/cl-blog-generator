<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
<link href="../../style.css" title="sans" media="screen" type="text/css" rel="stylesheet"/>
<link href="../../feed.atom" title="Atom (full content)" type="application/atom+xml" rel="alternate"/>
<title>cl-blog-generator : Blog Generator Configuration</title><link rel="prev" href="/cl-blog-generator/content/site/post/2009/blog_generator_design.xhtml" title="Blog Generator Design"/><meta name="description" content="The blog generator is intended to be quite flexible, within the design constraints, which has lead to a large number of possible configurations, both on the lisp side, and for Emacs.  Drafts can be written using any editor, but I shall describe use with Emacs.  The package has only been tested with SBCL, but should work with any common lisp implentation."/><meta name="keywords" content="lisp"/>
</head>
<body>
<div id="container">
<div id="banner"><h1><span id="post-title">Blog Generator Configuration</span></h1></div>
<div id="centercontent">
<div id="post">
<p>The blog generator is intended to be quite flexible, within the design constraints, which has lead to a large number of possible configurations, both on the lisp side, and for Emacs.  Drafts can be written using any editor, but I shall describe use with Emacs.  The package has only been tested with SBCL, but should work with any common lisp implentation.</p>

<h2>Prerequisites</h2>
<p>The blog generator uses <a href="http://common-lisp.net/project/cxml/">CXML</a>, <a href="http://common-lisp.net/project/elephant/">Elephant</a>, <a href="http://weitz.de/cl-fad/">CL-FAD</a>, <a href="http://common-lisp.net/project/local-time/">Local-Time</a>, and <a href="http://common-lisp.net/project/stefil/">Stefil</a> for testing.  I am using clbuild to obtain these.</p>
<p>For Emacs, I use <a href="http://www.thaiopensource.com/nxml-mode/">nXML mode</a>.</p>

<h2>Configuration Environments</h2>
<p>A configuration switching method is included in the package, but it's use is optional, and as is usual for lisp, configuration is through special variables.</p>
<p>For an example of using the configuration environments, look at the <code>config.lisp</code> file loaded by the <code>my-blog.asd</code> system.  This defines the three environments that I use, <code>:test</code>, <code>:development</code>, and <code>:production</code>.  Configurations are defined using <code>SET-ENVIRONMENT</code> and activated with <code>CONFIGURE</code>.</p>

<h2>Basic Configuration</h2>
<p>The first configuration required is the choice of file system locations for the published posts (<code>*PUBLISHED-PATH*</code>), the generated web pages(<code>*SITE-PATH*</code>) and the page templates (<code>*TEMPLATE-PATH*</code>).   Drafts can exist anywhere, and are not tracked by the generator.</p>
<p>Next, the web paths need to be configured.  The path of the blog's index file relative to the site root is required (<code>*BLOG-ROOT-PATH*</code>), as is the domain of the site (<code>*BLOG-DOMAIN*</code>), in order for it to be used in the Atom feed.</p>
<p>Finally, the database connection expression is required (<code>*BLOG-DB-SPEC*</code>).  Please refer to the Elephant documentation for your choices here.  I use postgres, but it should work with the BDB backend as well.</p>

<h2>Templates</h2>
<p>The site requires three templates in <code>*TEMPLATE-PATH*</code>; for the index file (<code>index.html</code>), for the posts (<code>post.xhtml</code>) and for the Atom feed (<code>atom.xml</code>).  The templates are very simple - each div or span with a recognised id has content injected into it.  The recoginised id's are:</p>
<ul>
  <li><code>posts</code> - replaced with the current post synopses, and links to the posts</li>
  <li><code>post</code> - replaced with the current post's content</li>
  <li><code>post-title</code> - replaced with the current post's title</li>
  <li><code>post-when</code> - replaced with the current post's published date</li>
  <li><code>post-update</code> - replaced with the current post's updated date</li>
</ul>
<p>For the Atom feed, the <code>updated</code> element is filled out correctly, and the posts are automatically inserted, ie. there are no special id's.</p>

</div>
</div>

<div id="rightcontent">
<div class="oo"><a href="../../index.xhtml" id="to-home"><span id="home">home</span></a></div>
 <a href="" rel="me">source</a>
 <a href="http://hugoduncan.org" rel="me">Hugo Duncan</a>
<div class="vcard">
  <a href="http://hugoduncan.org/" class="fn url">Hugo Duncan</a>
  <div><a href="mailto:blogen@hugoduncan.org" class="email">
       <span class="type">pref</span><span>erred email</span>
  </a></div>
</div>
</div>
</div>
</body>
</html>